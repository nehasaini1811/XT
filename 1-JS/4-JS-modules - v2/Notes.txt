
---------------------------------------------------------------
.js developement without module standard & loader
---------------------------------------------------------------

Problems:

==> global naming collisions
==> loading dependency modules before dependent using them


---------------------------------------------------------------
Soln: => from third-parties , we got module standards & loaders
---------------------------------------------------------------

- AMD ( Async Module Definition ) spec
- UMD
- commonJS    ( popular standard )



---------------------------------------------------------------
// commonJS module standard
---------------------------------------------------------------

-> by default, every .js file is module
-> by default, all var(s) & functions in .js file are private
-> to abstract/export any member(s), use 'module.exports' object
-> to require/import any module , use 'require()' function
-> group related modules as package with description  file 'package.json'


imp-note : Node.js runtime implemented this standard as default module standard.

--------------------------------------------------------------



---------------------------------
NPM ( Node Package Manager) tool
---------------------------------


 --> cli tool
 --> part of Node.js runtime


why we need ?

 --> to publish .js-packages to NPM-repository  ( if package is open-source)
 --> to install .js-packages from NPM-repository

 --> to manage build-cycle ( i.e start, compile , test , build-for-production , start-dev-server, ...)

imp-note:   *NPM treats complete project as 1 package
            *require/import - if not specified local path, then will search for "node_modules" starting from current directory until root directory

private property in package.json
"private": true         //If set true, then won't be able to publish package
package/project versions in package.json
"version": "1.0.0"
which is explained as "major.minor.patch" version

**NPM commands**
 npm login
 npm publish            //"1.0.0" For publish/ re-publish the new version
 npm install            // Will install packages in node_modules in current directory
 npm version patch      //"1.0.1" This command will automatically increment the patch version by 1 unit in the package.json
 npm version minor      //"1.1.0"
 npm version major      //"2.0.0"
 npm update             // To update the package versions to whatever changed value mentioned in package.json or latest patch version if "^" tild operator put before version
                        //e.g. "sapient-greet": "^1.0.0" => "1.0.1"
 npm get prefix         // gets global installation location/directory for npm

--------------------------------------------------------------



 module-bundle tools
 ---------------------

    e.g
    
    => browserify       // bundles commonJS modules into ES module standard
    => webpack
     

--------------------------------------------------------------     



--------------------------------------------------------------
From ECMAScript spec
---------------------------------------------------------------
// ES module standard
---------------------------------------------------------------

-> by default, every .js file is module
-> by default, all var(s) & function(s) in .js file are private
-> to abstract/export any member(s), use 'export' keyword
-> to require/import any module , use 'import' keyword
-> group related modules into package with description  file 'package.json'

--------------------------------------------------------------


